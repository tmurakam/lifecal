#!/usr/bin/ruby

require "schema.rb"

def getObjcType(type)
    case type
    when "TEXT"
        return "NSString*", "retain"
    when "DATE"
        return "NSDate*", "retain"
    when "INTEGER"
        return "int", "assign"
    when "REAL"
        return "double", "assign"
    end

    puts "#{type} is not supported."
    exit 1
end

def getMethodType(type)
    case type
    when "INTEGER"
        return "Int"
    when "REAL"
        return "Double"
    when "TEXT"
        return "String"
    when "DATE"
        return "Date"
    else
        puts "#{type} not supported"
        exit 1
    end
end

# generate header
def generateHeader(cdef, fh)
    fh.puts "// generated by generate.rb"
    fh.puts "#import \"DataModelCommon.h\""
    fh.puts

    fh.puts "@interface #{cdef.name} : NSObject {"
    fh.puts "    int id; // primary key"
    cdef.members.each do |m|
        type = getObjcType(cdef.types[m])
        fh.puts "    #{type} #{m}"
    end
    fh.puts "}"
    fh.puts

    fh.puts "@property(nonatomic,assign) int id;"
    cdef.members.each do |m|
        type, mem = getObjcType(cdef.types[m])
        fh.puts "@property(nonatomic,#{mem}) #{type} #{m};"
    end
    fh.puts

    fh.puts "- (void)_loadRow:(dbstmt *)stmt;"
    fh.puts

    fh.puts "@end"
end

# generate implementation
def generateImplementation(cdef, fh)
    fh.puts "// generated by generate.rb"
    fh.puts "#import \"#{cdef.name}.h\""
    fh.puts 

    fh.puts "@implementation #{cdef.name}"
    fh.puts "@synthesize id;"
    cdef.members.each do |m|
        fh.puts "@synthesize #{m};"
    end
    fh.puts

    fh.puts <<EOF
- (id)init
{
    self = [super init];
    return self;
}

- (void)dealloc
{
EOF
    
    cdef.members.each do |m|
        type, mem = getObjcType(cdef.types[m])
        if (mem == "retain")
            fh.puts "    [#{m} release];"
        end
    end
    
    fh.puts <<EOF
    [super dealloc];
}

+ (void)createTable
{
    Database *db = [Database instance];
    dbstmt *stmt;
    
    stmt = [db prepare:"SELECT sql FROM sqlite_master WHERE type='#{cdef.name}' AND name='#{cdef.name}';"];
    if ([stmt step] != SQLITE_ROW) {
        [db exec:"CREATE TABLE #{cdef.name} ("
            "id INTEGER PRIMARY KEY"
EOF
    
    cdef.members.each do |m|
        fh.puts "            \", #{m} #{cdef.types[m]}\""
    end

    fh.puts <<EOF
            ");"
         ];
    }
}

+ (NSMutableArray *)getAll
{
    NSMutableArray *array = [[[NSMutableArray alloc] init] autorelease];
    Database *db = [Database instance];
    dbstmt *stmt;

    stmt = [db prepare:"SELECT * FROM #{cdef.name};"];
    while ([stmt step] == SQLITE_ROW) {
        #{cdef.name} e = [[[#{cdef.name} alloc] init] autorelease];
        [e _loadRow:stmt];
        [array addObject:e];
    }
    return array;
}

- (void)_loadRow:(dbstmt *)stmt
{
    self.id = [stmt colInt:0];
EOF

    i = 1
    cdef.members.each do |m|
        type = cdef.types[m]
        method = "col" + getMethodType(type)
        fh.puts "    self.#{m} = [stmt #{method}:#{i}];"
        i += 1
    end
    
    fh.puts <<EOF
}
EOF

end

# start from here
schema = Schema.new
schema.loadFromFile("schema.def")
schema.dump

# generate
schema.defs.each do |cdef|
    fh = open(cdef.name + ".h", "w")
    generateHeader(cdef, fh)
    fh.close

    fh = open(cdef.name + ".m", "w")
    generateImplementation(cdef, fh)
    fh.close
end

        
    
